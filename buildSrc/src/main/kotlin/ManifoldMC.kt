import java.io.File

class ManifoldMC {
    companion object {
        public fun setupPreprocessor(
            compilerArgs: MutableList<String>?,
            loader: String,
            parent: File,
            mcString: String,
            isActive: Boolean,
            clearMainProject: Boolean
        ) {
            val mcVers = listOf("1.18.2", "1.19.2", "1.20.1", "1.21.1", "1.21.5")
            val mcIndex = mcVers.indexOf(mcString)
            val argList = ArrayList<String>()

            for (i in mcVers.indices) {
                val mcStr = mcVers[i].replace(".", "_").substring(2)
                if (mcIndex < i) argList.add("BEFORE_$mcStr")
                if (mcIndex <= i) argList.add("UPTO_$mcStr")
                if (mcIndex == i) argList.add("CURRENT_$mcStr")
                if (mcIndex > i) argList.add("NEWER_THAN_$mcStr")
                if (mcIndex >= i) argList.add("AFTER_$mcStr")
            }

            when (loader) {
                "fabric" -> argList.add("FABRIC")
                "forge" -> {
                    argList.add("FORGE")
                    argList.add("FORGELIKE")
                }

                "neoforge" -> {
                    argList.add("NEO")
                    argList.add("FORGELIKE")
                }
            }

            val sb = StringBuilder().append("# DO NOT EDIT - GENERATED BY THE BUILD SCRIPT\n")
            for (arg in argList) {
                compilerArgs?.add("-A$arg")
                sb.append(arg).append("=\n")
            }

            File(parent, "build.properties").writeText(sb.toString())

            // File(parent, "build/chiseledSrc/").mkdir()
            // File(parent, "build/chiseledSrc/build.properties").writeText(sb.toString())

            if (isActive)
                File(parent, "../../src/main/build.properties").writeText(sb.toString())

            if (clearMainProject)
                File(parent, "../../src/main/build.properties").delete()
        }
    }
}